{"name":"db2unit","tagline":"A testing framework for the SQL-PL language","body":"db2unit\r\n=======\r\n\r\ndb2unit is a testing framework for IBM DB2 written in SQL-PL language. It is\r\nxUnit framework, that takes the same design as the well-known jUnit. db2unit could\r\nbe considered as a jUnit porting for DB2 SQL-PL.\r\n\r\n * jUnit\r\n    http://junit.org\r\n * xUnit\r\n    https://en.wikipedia.org/wiki/XUnit\r\n\r\nThe licenses of this project are:\r\n\r\n * Source code: GNU General Public License v3.0\r\n * Documentation: GNU Free Documentation License.\r\n\r\nThese are some useful links:\r\n\r\n * The source code and project is hosted in GitHub at:\r\n    https://github.com/angoca/db2unit\r\n * The Wiki is at:\r\n    https://github.com/angoca/db2unit/wiki\r\n * The released versions are published at:\r\n    https://github.com/angoca/db2unit/releases\r\n * The issue tracker for bugs and comments is at:\r\n    https://github.com/angoca/db2unit/issues\r\n\r\nAuthor:\r\n\r\nAndres Gomez Casanova (@AngocA)\r\n\r\n\r\n------------------\r\n## Installation from released file ##\r\n\r\nOne variable needs to the specified in order to run the install and example\r\nscripts.\r\n\r\n    DB2UNIT_PATH\r\n\r\nThis variable is initialized via the `init` script.\r\n\r\nBefore installing the scripts in a database, a connection to it has to be\r\nestablished. If not, an error will be raised.\r\n\r\n**Linux/UNIX/MAC OS**:\r\n\r\nJust follow these steps:\r\n\r\n    tar -zxf db2unit.tar.gz\r\n    cd db2unit\r\n    . ./install\r\n\r\nMake sure to put the dot before the command. This will source the values and\r\nuse the current connection.\r\n\r\n**Windows Terminal (CMD - db2clp)**:\r\n\r\nFirst, unzip the file db2unit.zip, and then:\r\n\r\n    cd db2unit\r\n    install.bat\r\n\r\n**Windows PowerShell**:\r\n\r\nFirst, unzip the file db2unit.zip, and then:\r\n\r\n    cd db2unit\r\n    .\\install.ps1\r\n\r\n====\r\n\r\nAfter the install, all statements should have been successful.\r\n\r\nA more detailed guide to install the utility can be found in the _Install_\r\nsection of the wiki:\r\nhttps://github.com/angoca/db2unit/wiki/Install\r\n\r\nYou can also install the utility from the sources and run the examples and\r\ntests:\r\nhttps://github.com/angoca/db2unit/wiki/Install%20from%20sources\r\n\r\n\r\n-----------\r\n## Usage ##\r\n\r\n### 1. Write the test suite ###\r\n\r\nLet's suppose you work on a schema called `MY_SCHM`. From now on, the schema\r\nname will refer to the name of the test suite. It means, your test suite is\r\nalso called `MY_SCHM`.\r\n\r\nYour tests suite could have the following fixtures that helps to prepare the\r\nenvironment:\r\n\r\n    -- Test fixtures\r\n    CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()\r\n     BEGIN\r\n      -- Your code\r\n     END @\r\n\r\n    CREATE OR REPLACE PROCEDURE SETUP()\r\n     BEGIN\r\n      -- Your code\r\n     END @\r\n\r\n    CREATE OR REPLACE PROCEDURE TEAR_DOWN()\r\n     BEGIN\r\n      -- Your code\r\n     END @\r\n\r\n    CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()\r\n     BEGIN\r\n      -- Your code\r\n     END @\r\n\r\nYou create your tests in the same schema as your fixtures. All of these stored\r\nprocedures will be your tests suite. The name of our tests should starts by TEST_\r\nand they should not have any argument, like this:\r\n\r\n    CREATE OR REPLACE PROCEDURE TEST_my_first_test()\r\n     BEGIN\r\n      -- Your code using the test functions.\r\n      ASSERT_STRING_EQUALS(EXPECTED, ACTUAL);\r\n     END @\r\n\r\nIn the previous test, you compared two strings. You can use other types of\r\nassertions. Please visit the API section:\r\n https://github.com/angoca/db2unit/wiki/API\r\n\r\nThe fixtures and the tests should be created under the same schema, in order to\r\nbe part of the same suite.\r\n\r\n### 2. Execute your tests suite ###\r\n\r\nOnce you have created your procedures in the database, you can run the tests\r\nsuite like this:\r\n\r\n    CALL DB2UNIT.RUN_SUITE('MY_SCHM')\r\n\r\nOnce the execution is finished, you will see a report of the execution.\r\n\r\nCheck the _Usage_ section for more information about the framework.\r\n https://github.com/angoca/db2unit/wiki/Usage\r\n\r\n\r\n---------------------------\r\n## FILES AND DIRECTORIES ##\r\n\r\nThese are the files included in the released version:\r\n\r\n * `COPYING.txt` -- License for the code (GPL license v3.0 - OpenSource).\r\n * `init*` -- Environment configuration.\r\n * `install*` -- Installation files.\r\n * `README.txt` -- This file.\r\n * `reinstall*` -- Reinstallation files.\r\n * `uninstall*` -- Uninstallation files.\r\n * `doc` directory -- Documentation directory.\r\n * `examples` directory -- Examples ready to run.\r\n * `sql-pl` directory -- Directory for all objects: DDL, DML, routines\r\n     definition.\r\n   * `00-Prereqs.sql` -- Tests the prerequisites to install the framework.\r\n   * `01-ObjectsAdmin.sql` -- Administrative objects like tablespaces,\r\n       bufferpools and schemas to install the framework.\r\n   * `02-Objects.sql` -- Tables for the reports and for data type anchoring.\r\n   * `03-Headers.sql` -- Definition of all public routines.\r\n   * `04-Body.sql` -- Core of the unit framework.\r\n   * `05-Asserts.sql` -- Set of assert procedures to perform tests.\r\n   * `06-AssertNoMessage.sql` -- Set of assert procedures to perform tests,\r\n   * `07-Version.sql` -- Version of the framework.\r\n       without passing messages to the test.\r\n   * `98-Clean.sql` -- Removes all db2unit objects. Used when uninstalling.\r\n   * `99-CleanAdmin.sql` -- Removes admin objects. Used when uninstalling.\r\n\r\nThe * in the install-related files means that several files for each name\r\ncan be found:\r\n\r\n * `.bat` -- Windows Batch file for CMD.exe\r\n * `.ps1` -- Windows PowerShell\r\n * `.sql` -- For DB2 CLPPlus.\r\n * No extension -- For Linux/UNIX/Mac OS X.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}