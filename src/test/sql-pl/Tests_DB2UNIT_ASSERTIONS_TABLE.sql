--#SET TERMINATOR @

/*
 This file is part of db2unit: A unit testing framework for DB2 LUW.
 Copyright (C)  2014  Andres Gomez Casanova (@AngocA)

 db2unit is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 db2unit is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 Andres Gomez Casanova <angocaATyahooDOTcom>
*/

SET CURRENT SCHEMA DB2UNIT_ASSERTIONS_TABLE @

SET PATH = "SYSIBM","SYSFUN","SYSPROC","SYSIBMADM", DB2UNIT_2_BETA, DB2UNIT_ASSERTIONS_TABLE @

/**
 * Tests for String assertions.
 *
 * Version: 2014-05-01 1
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

-- Previously create the table in order to compile these tests.
BEGIN
 DECLARE STATEMENT VARCHAR(128);
 DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' BEGIN END;
 SET STATEMENT = 'CREATE TABLE REPORT_TESTS LIKE DB2UNIT_2_BETA.REPORT_TESTS';
 EXECUTE IMMEDIATE STATEMENT;
END @

ALTER TABLE DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
  ALTER COLUMN SUITE_NAME
  SET WITH DEFAULT 'DB2UNIT_ASSERTIONS_TABLE' @

-- Before all tests.
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 BEGIN
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE INEXISTANT_TABLE CONDITION FOR SQLSTATE '42704';
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR INEXISTANT_TABLE
    SET SENTENCE = '';

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_01';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_02';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_04';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_05';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_07_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_08_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_09_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_10_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_11_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_11_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_12_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_12_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_13_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_13_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_14_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_14_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_15_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_15_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_16_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_16_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_17_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_17_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_18_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_18_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
 END @

-- Before all tests.
CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
  CALL ONE_TIME_SETUP() @

-- TABLES

---- Test the assert_empty_table with an empty table.
--CREATE OR REPLACE PROCEDURE TEST_TABLE_01()
-- BEGIN
--  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
--  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
--  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
--  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
--  DECLARE STMT STATEMENT;
--
--  SET EXPECTED_MSG = 'Message check';
--  INSERT INTO DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS (DATE, EXECUTION_ID,
--    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
--  SET TABLE_NAME = 'TABLE_TEST_01';
--  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
--    || TABLE_NAME || '(COL int)';
--  PREPARE STMT FROM SENTENCE;
--  EXECUTE STMT;
--
--  CALL DB2UNIT.ASSERT_TABLE_EMPTY(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
--    TABLE_NAME);
--
--  SELECT MESSAGE INTO ACTUAL_MSG
--    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
--    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
--
--  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
--    || TABLE_NAME;
--  PREPARE STMT FROM SENTENCE;
--  EXECUTE STMT;
--  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
--    WHERE MESSAGE = EXPECTED_MSG
--    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
--
--  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
--  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
--    WHERE EXECUTION_ID = 0
--    AND MESSAGE = EXPECTED_MSG
--    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
-- END @

-- Test the assert_empty_table with a non empty table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_02()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'The table is not empty';
  SET TABLE_NAME = 'TABLE_TEST_02';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EMPTY(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);
  CALL DB2UNIT.BACK_TO_EXECUTING();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EMPTY'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_empty_table with a non-existent table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_03()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;

  SET TABLE_NAME = 'TABLE_TEST_03_INEXISTANT';
  SET EXPECTED_MSG = 'Table does not exist '
    || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.' || TABLE_NAME;

  CALL DB2UNIT.ASSERT_TABLE_EMPTY(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EMPTY'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_non_empty_table with a non empty table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_04()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET TABLE_NAME = 'TABLE_TEST_03';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_NON_EMPTY(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
 END @

-- Test the assert_non_empty_table with an empty table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_05()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'The table is empty';
  SET TABLE_NAME = 'TABLE_TEST_04';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_NON_EMPTY(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);
  CALL DB2UNIT.BACK_TO_EXECUTING();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_NON_EMPTY'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_non_empty_table with an inexistant table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_06()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;

  SET TABLE_NAME = 'TABLE_TEST_06_INEXISTANT';
  SET EXPECTED_MSG = 'Table does not exist '
    || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.' || TABLE_NAME;

  CALL DB2UNIT.ASSERT_TABLE_NON_EMPTY(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_NON_EMPTY'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test assert_equals_table with null schema.
CREATE OR REPLACE PROCEDURE TEST_TABLE_07()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET TABLE_NAME = 'TABLE_TEST_07_EXP';
  SET EXPECTED_MSG = 'Some of the entry values are null: '
    || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || ',' || TABLE_NAME || ','
    || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || ',NULL';
  INSERT INTO DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, NULL);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
 END @

-- Test assert_equals_table with null table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_08()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET TABLE_NAME = 'TABLE_TEST_08_EXP';
  SET EXPECTED_MSG = 'Some of the entry values are null: '
    || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || ',' || TABLE_NAME || ',NULL,'
    || TABLE_NAME;
  INSERT INTO DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME, NULL, TABLE_NAME);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
 END @

-- Test assert_equals_table with null schema.
CREATE OR REPLACE PROCEDURE TEST_TABLE_09()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET TABLE_NAME = 'TABLE_TEST_09_EXP';
  SET EXPECTED_MSG = 'Some of the entry values are null: '
    || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || ',NULL,'
    || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || ',' || TABLE_NAME;
  INSERT INTO DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    NULL, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
 END @

-- Test assert_equals_table with null table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_10()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET TABLE_NAME = 'TABLE_TEST_10_EXP';
  SET EXPECTED_MSG = 'Some of the entry values are null: NULL,' || TABLE_NAME
    || ',' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || ',' || TABLE_NAME;
  INSERT INTO DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(NULL, TABLE_NAME,
    DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
 END @

-- Test the assert_equals_table with different columns.
CREATE OR REPLACE PROCEDURE TEST_TABLE_11()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Different quantity of columns';
  SET TABLE_NAME_EXP = 'TABLE_TEST_11_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_11_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int, COL2 INT)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with different columns.
CREATE OR REPLACE PROCEDURE TEST_TABLE_12()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Different quantity of columns';
  SET TABLE_NAME_EXP = 'TABLE_TEST_12_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int, COL2 INT)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_12_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with different quantity.
CREATE OR REPLACE PROCEDURE TEST_TABLE_13()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Tables have different content';
  SET TABLE_NAME_EXP = 'TABLE_TEST_13_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_13_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  COMMIT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with different quantity.
CREATE OR REPLACE PROCEDURE TEST_TABLE_14()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Tables have different content';
  SET TABLE_NAME_EXP = 'TABLE_TEST_14_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_14_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with empty in both.
CREATE OR REPLACE PROCEDURE TEST_TABLE_15()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET TABLE_NAME_EXP = 'TABLE_TEST_15_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_15_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
 END @

-- Test the assert_equals_table with different values.
CREATE OR REPLACE PROCEDURE TEST_TABLE_16()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Tables have different content';
  SET TABLE_NAME_EXP = 'TABLE_TEST_16_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_16_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || ' VALUES (2)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with different values.
CREATE OR REPLACE PROCEDURE TEST_TABLE_17()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Tables have different content';
  SET TABLE_NAME_EXP = 'TABLE_TEST_17_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (2)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_17_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with same values.
CREATE OR REPLACE PROCEDURE TEST_TABLE_18()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET TABLE_NAME_EXP = 'TABLE_TEST_18_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_18_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
 END @

-- Test the assert_equals_table with different values.
CREATE OR REPLACE PROCEDURE TEST_TABLE_19()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Tables have different content';
  SET TABLE_NAME_EXP = 'TABLE_TEST_19_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (1), (2)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_19_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || ' VALUES (2)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with different values.
CREATE OR REPLACE PROCEDURE TEST_TABLE_20()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Tables have different content';
  SET TABLE_NAME_EXP = 'TABLE_TEST_20_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (2)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_20_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || ' VALUES (1), (2)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_2_BETA.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);
  DELETE FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS
    WHERE MESSAGE = 'TABLE_EQUALS'
    AND DATE = (SELECT MAX(DATE) FROM DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Register the suite.
CALL DB2UNIT.REGISTER_SUITE(CURRENT SCHEMA) @

