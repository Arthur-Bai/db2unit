--#SET TERMINATOR @

/*
 This file is part of db2unit: A unit testing framework for DB2 LUW.
 Copyright (C)  2014  Andres Gomez Casanova (@AngocA)

 db2unit is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 db2unit is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 Andres Gomez Casanova <angocaATyahooDOTcom>
*/

SET CURRENT SCHEMA DB2UNIT_EXECUTION @

SET PATH = "SYSIBM","SYSFUN","SYSPROC","SYSIBMADM", DB2UNIT_2_BETA, DB2UNIT_EXECUTION @

/**
 * Tests for Execute Tests.
 *
 * Version: 2014-04-30 V2_BETA
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

-- Creates the given schema.
CREATE OR REPLACE PROCEDURE CREATE_SCHEMA_TABLE(
  IN SCH_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME
  )
 BEGIN
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SENTENCE = 'CREATE SCHEMA ' || SCH_NAME ;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
 END @

-- Drops the given schema and its table.
CREATE OR REPLACE PROCEDURE DROP_SCHEMA_TABLE(
  IN SCH_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME
  )
 BEGIN
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE INEXISTANT_TABLE CONDITION FOR SQLSTATE '42704';
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42893' SET SENTENCE = '';
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42884' SET SENTENCE = '';
  DECLARE CONTINUE HANDLER FOR INEXISTANT_TABLE SET SENTENCE = '';

  SET SENTENCE = 'DROP TABLE ' || SCH_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP SCHEMA ' || SCH_NAME || ' RESTRICT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
 END @

CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_2', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_2') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_3', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_3') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_4', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_4') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_5', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_5') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_6_1234567890'
    || '1234567890123456789012345678901234567890123456789012345678901234567890'
    || '12345678901234567890123', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_6') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_7', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_7') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_8', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_8') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_9', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_9') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_10', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_10') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_11', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_11') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_12', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_12') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_13', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_13') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_14', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_14') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_15', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_15') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_16', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_16') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_17', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_17') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_18', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_18') @
-- 19
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_20', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_20') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_21', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_21') @
CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION_TEST_22', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_22') @

-- Drops all tables and schemas.
CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 BEGIN
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' BEGIN END;
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_2');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_3');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_4');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_5');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_6_1234567890'
    || '1234567890123456789012345678901234567890123456789012345678901234567890'
    || '12345678901234567890123');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_7');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_Execution_Test_8');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_9');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_10');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_11');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_12');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_13');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_14');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_15');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_16');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_17');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_18');
  -- 19
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_20');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_21');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_22');
 END @

-- Creates the necessary schemas.
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 BEGIN
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' BEGIN END;
  -- If a previous execution did not correctly finished.
  CALL ONE_TIME_TEAR_DOWN();

  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_2');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_3');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_4');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_5');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_6_1234567890'
    || '1234567890123456789012345678901234567890123456789012345678901234567890'
    || '12345678901234567890123');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_7');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_Execution_Test_8');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_9');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_10');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_11');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_12');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_13');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_14');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_15');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_16');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_17');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_18');
  -- 19
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_20');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_21');
  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_22');
 END @

-- Test the execution of a non-existent schema.
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.MESSAGE_REPORT;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.MESSAGE_REPORT;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;

  SET SCHEMA_NAME = 'NoSchema1                                                 '
    || '                                    ';
  SET EXPECTED_MSG = 'The given schema does not exists: ' || SCHEMA_NAME;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  SELECT MESSAGE_REPORT INTO ACTUAL_MSG
    FROM DB2UNIT_2_BETA.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_2_BETA.EXECUTION_REPORTS);

  DELETE FROM DB2UNIT_2_BETA.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_2_BETA.EXECUTION_REPORTS)
    AND MESSAGE_REPORT = EXPECTED_MSG;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the execution of a existent schema without problem.
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = '0 tests with errors';
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_2';

  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);

  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;
  COMMIT;

  DELETE FROM DB2UNIT_2_BETA.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_2_BETA.EXECUTION_REPORTS)
    AND MESSAGE_REPORT LIKE 'Execution of DB2UNIT_EXECUTION_TEST_2 with %';
  DELETE FROM DB2UNIT_2_BETA.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_2_BETA.EXECUTION_REPORTS)
    AND MESSAGE_REPORT LIKE 'db2unit is licensed under the terms of the GPL v3';
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the execution of a existent schema without table creation.
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.MESSAGE_REPORT;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.MESSAGE_REPORT;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_3';
  SET EXPECTED_MSG = 'The reports table already exist: ' || SCHEMA_NAME
    || '.REPORT_TESTS';

  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  SELECT MESSAGE_REPORT INTO ACTUAL_MSG
    FROM DB2UNIT_2_BETA.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_2_BETA.EXECUTION_REPORTS);
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Tests that a report message persist even after a rollback
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE ID INT;
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' SET ID = 0;
  SET EXPECTED_MSG = '0 tests with errors';
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_4';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_4() '
    || 'BEGIN '
    || 'ROLLBACK; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_4()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Tests that a report message persist even after a commit
CREATE OR REPLACE PROCEDURE TEST_05()
 BEGIN
  DECLARE ID INT;
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  SET EXPECTED_MSG = '0 tests with errors';
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_5';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_5() '
    || 'BEGIN '
    || 'COMMIT; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_5()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the execution of a existent schema with a very long name without
-- problem. This is the MAX name for a schema without generating problems.
CREATE OR REPLACE PROCEDURE TEST_06()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = '0 tests with errors';
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_6_1234567890'
    || '1234567890123456789012345678901234567890123456789012345678901234567890'
    || '12345678901234567890123';

  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);

  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;
  COMMIT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the execution of a existent schema without problem.
CREATE OR REPLACE PROCEDURE TEST_08()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = '0 tests with errors';
  SET SCHEMA_NAME = 'DB2UNIT_Execution_Test_8';

  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);

  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;
  COMMIT;

  DELETE FROM DB2UNIT_2_BETA.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_2_BETA.EXECUTION_REPORTS)
    AND MESSAGE_REPORT LIKE 'Execution of DB2UNIT_EXECUTION_TEST_2 with %';
  DELETE FROM DB2UNIT_2_BETA.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_2_BETA.EXECUTION_REPORTS)
    AND MESSAGE_REPORT LIKE 'db2unit is licensed under the terms of the GPL v3';
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the execution of a existent schema without problem.
CREATE OR REPLACE PROCEDURE TEST_09()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = '0 tests with errors';
  SET SCHEMA_NAME = 'DB2UNIT_Execution_Test_9';

  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);

  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;
  COMMIT;

  DELETE FROM DB2UNIT_2_BETA.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_2_BETA.EXECUTION_REPORTS)
    AND MESSAGE_REPORT LIKE 'Execution of DB2UNIT_EXECUTION_TEST_2 with %';
  DELETE FROM DB2UNIT_2_BETA.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_2_BETA.EXECUTION_REPORTS)
    AND MESSAGE_REPORT LIKE 'db2unit is licensed under the terms of the GPL v3';
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Tests that a test that throws a signal.
CREATE OR REPLACE PROCEDURE TEST_10()
 BEGIN
  DECLARE ID INT;
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE SQLSTT VARCHAR(5);
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' SET ID = 0;
  SET SQLSTT = '12345';
  SET EXPECTED_MSG = 'Exception(2): SQLCode -438, SQLState ' || SQLSTT
    || '-SQL0438N  Application raised error or warning with diagnostic text: '
    || '"".  SQLSTATE=' || SQLSTT;
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_10';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_10() '
    || 'BEGIN '
    || '  SIGNAL SQLSTATE ''' || SQLSTT || '''; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''% tests with errors''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''% tests failed''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''% tests passed''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''% tests were executed''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_10()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Tests that a test that throws a signal and register the test.
CREATE OR REPLACE PROCEDURE TEST_11()
 BEGIN
  DECLARE ID INT;
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE ACTUAL_MSG2 ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG2 ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE SQLSTT VARCHAR(5);
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' SET ID = 0;
  SET EXPECTED_MSG2 = 'TEST-11 MSG';
  SET SQLSTT = '67890';
  SET EXPECTED_MSG = 'Exception(2): SQLCode -438, SQLState ' || SQLSTT
    || '-SQL0438N  Application raised error or warning with diagnostic text: '
    || '"".  SQLSTATE=' || SQLSTT;
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_11';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_11() '
    || 'BEGIN '
    || ' CALL DB2UNIT.REGISTER_MESSAGE(''' || EXPECTED_MSG2 || '''); '
    || '  SIGNAL SQLSTATE ''' || SQLSTT || '''; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''% tests with errors''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''% tests failed''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''% tests passed''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''% tests were executed''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;

  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE LIKE ''' || EXPECTED_MSG || '''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG2;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_11()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG2, ACTUAL_MSG2);
 END @

-- Tests that executes just one SP from a suite with multiple tests.
CREATE OR REPLACE PROCEDURE TEST_12()
 BEGIN
  DECLARE ID INT;
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' SET ID = 0;
  SET EXPECTED_MSG = '1 tests were executed';
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_12';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_12a() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_12b() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME, TEST_NAME => 'TEST_12b');

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE MESSAGE LIKE ''% tests were executed'')';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_12a()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_12b()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Tests that calls a given test without the same case.
CREATE OR REPLACE PROCEDURE TEST_13()
 BEGIN
  DECLARE ID INT;
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' SET ID = 0;
  SET EXPECTED_MSG = '1 tests were executed';
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_13';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_13A() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME, TEST_NAME => 'Test_13a');

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE MESSAGE LIKE ''% tests were executed'')';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_13A()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Tests that calls a given test without the same case.
CREATE OR REPLACE PROCEDURE TEST_14()
 BEGIN
  DECLARE ID INT;
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' SET ID = 0;
  SET EXPECTED_MSG = 'Previous execution ID (PREV_EXEC_ID) and a test name '
    || '(TEST_NAME) were given (5, Test_14)';
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_14';

  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME, 5, 'Test_14');

  SET SENTENCE = 'SET ? = (SELECT MESSAGE_REPORT '
    || 'FROM DB2UNIT_2_BETA.EXECUTION_REPORTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM DB2UNIT_2_BETA.EXECUTION_REPORTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Tests that throws an exception when autonomous.
CREATE OR REPLACE PROCEDURE TEST_15()
 BEGIN
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE AUTONOMOUS BOOLEAN;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_15';

  CALL DB2UNIT.REGISTER_MESSAGE('Calling autonomous');
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_15() '
    || 'BEGIN '
    || '  SIGNAL SQLSTATE ''99999''; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET AUTONOMOUS = DB2UNIT.AUTONOMOUS_EXEC;
  CALL DB2UNIT.SET_AUTONOMOUS(TRUE);
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME, TEST_NAME => 'Test_15');

  IF (AUTONOMOUS = FALSE) THEN
   CALL DB2UNIT.SET_AUTONOMOUS(FALSE);
  END IF;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_15()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;
 END @

-- Tests that no errors in suite is code 0.
CREATE OR REPLACE PROCEDURE TEST_16()
 BEGIN
  DECLARE EXPECTED_RET INTEGER;
  DECLARE ACTUAL_RET INTEGER;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_16';
  SET EXPECTED_RET = 0;

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_16() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME, TEST_NAME => 'Test_16');
  GET DIAGNOSTICS ACTUAL_RET = DB2_RETURN_STATUS;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_16()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT.ASSERT_INT_EQUALS(EXPECTED_RET, ACTUAL_RET);
 END @

-- Tests that any fail in suite the code is 1.
CREATE OR REPLACE PROCEDURE TEST_17()
 BEGIN
  DECLARE EXPECTED_RET INTEGER;
  DECLARE ACTUAL_RET INTEGER;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_17';
  SET EXPECTED_RET = 1;

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_17() '
    || 'BEGIN '
    || ' CALL DB2UNIT.FAIL(); '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME, TEST_NAME => 'Test_17');
  GET DIAGNOSTICS ACTUAL_RET = DB2_RETURN_STATUS;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_17()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT.ASSERT_INT_EQUALS(EXPECTED_RET, ACTUAL_RET);
 END @

-- Tests that any error in suite the code is 1.
CREATE OR REPLACE PROCEDURE TEST_18()
 BEGIN
  DECLARE EXPECTED_RET INTEGER;
  DECLARE ACTUAL_RET INTEGER;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_18';
  SET EXPECTED_RET = 1;

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_18() '
    || 'BEGIN '
    || '  SIGNAL SQLSTATE ''66666''; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME, TEST_NAME => 'Test_18');
  GET DIAGNOSTICS ACTUAL_RET = DB2_RETURN_STATUS;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_18()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT.ASSERT_INT_EQUALS(EXPECTED_RET, ACTUAL_RET);
 END @

-- Tests invalid call return 2.
CREATE OR REPLACE PROCEDURE TEST_19()
 BEGIN
  DECLARE EXPECTED_RET INTEGER;
  DECLARE ACTUAL_RET INTEGER;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_19';
  SET EXPECTED_RET = 2;

  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  GET DIAGNOSTICS ACTUAL_RET = DB2_RETURN_STATUS;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT.ASSERT_INT_EQUALS(EXPECTED_RET, ACTUAL_RET);
 END @

-- Tests invalid call return 2.
CREATE OR REPLACE PROCEDURE TEST_20()
 BEGIN
  DECLARE EXPECTED_RET INTEGER;
  DECLARE ACTUAL_RET INTEGER;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_20';
  SET EXPECTED_RET = 2;

  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME, TEST_NAME => 'Test_20');
  GET DIAGNOSTICS ACTUAL_RET = DB2_RETURN_STATUS;

  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT.ASSERT_INT_EQUALS(EXPECTED_RET, ACTUAL_RET);
 END @

-- Tests invalid call return 2.
CREATE OR REPLACE PROCEDURE TEST_21()
 BEGIN
  DECLARE EXPECTED_RET INTEGER;
  DECLARE ACTUAL_RET INTEGER;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_21';
  SET EXPECTED_RET = 2;

  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME, 123, 'Test_21');
  GET DIAGNOSTICS ACTUAL_RET = DB2_RETURN_STATUS;

  CALL DB2UNIT.ASSERT_INT_EQUALS(EXPECTED_RET, ACTUAL_RET);
 END @

-- Tests that after all tests, a single test can be called.
CREATE OR REPLACE PROCEDURE TEST_22()
 BEGIN
  DECLARE ACTUAL_MSG1 ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG1 ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE ACTUAL_MSG2 ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG2 ANCHOR DB2UNIT_2_BETA.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  DECLARE MESSAGES_CURSOR CURSOR
    FOR RS;
  SET EXPECTED_MSG1 = '4 tests were executed';
  SET EXPECTED_MSG2 = '1 tests were executed';
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION_TEST_22';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_22a() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_22b() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_22c() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_22d() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);

  SET SENTENCE = 'SELECT MESSAGE '
    || 'FROM DB2UNIT_EXECUTION_TEST_22.REPORT_TESTS '
    || 'WHERE EXECUTION_ID = ( '
    || ' SELECT EXECUTION_ID '
    || ' FROM DB2UNIT_2_BETA.EXECUTIONS E '
    || ' WHERE  DATE = ( '
    || '  SELECT MAX(DATE) '
    || '  FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS SE JOIN DB2UNIT_2_BETA.EXECUTIONS E2 '
    || '  ON (SE.EXECUTION_ID = E2.EXECUTION_ID) '
    || '  WHERE SE.SUITE_NAME = ''DB2UNIT_EXECUTION_TEST_22'' '
    || '  AND E2.EXECUTION_ID = E2.EXECUTION_ID '
    || ' ) '
    || ') '
    || 'AND MESSAGE LIKE ''% tests were executed'' FETCH FIRST 1 ROW ONLY';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE RS FROM SENTENCE;
  OPEN MESSAGES_CURSOR;
  FETCH MESSAGES_CURSOR INTO ACTUAL_MSG1;
  CLOSE MESSAGES_CURSOR;

  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME, TEST_NAME => 'TEST_22b');
  SET SENTENCE = 'SELECT MESSAGE '
    || 'FROM DB2UNIT_EXECUTION_TEST_22.REPORT_TESTS '
    || 'WHERE EXECUTION_ID = ( '
    || ' SELECT EXECUTION_ID '
    || ' FROM DB2UNIT_2_BETA.EXECUTIONS E '
    || ' WHERE  DATE = ( '
    || '  SELECT MAX(DATE) '
    || '  FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS SE JOIN DB2UNIT_2_BETA.EXECUTIONS E2 '
    || '  ON (SE.EXECUTION_ID = E2.EXECUTION_ID) '
    || '  WHERE SE.SUITE_NAME = ''DB2UNIT_EXECUTION_TEST_22'' '
    || '  AND E2.EXECUTION_ID = E2.EXECUTION_ID '
    || ' ) '
    || ') '
    || 'AND MESSAGE LIKE ''% tests were executed'' FETCH FIRST 1 ROW ONLY';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE RS FROM SENTENCE;
  OPEN MESSAGES_CURSOR;
  FETCH MESSAGES_CURSOR INTO ACTUAL_MSG2;
  CLOSE MESSAGES_CURSOR;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_22a()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_22b()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;

  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG1, ACTUAL_MSG1);
  CALL DB2UNIT_2_BETA.DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG2, ACTUAL_MSG2);
 END @

-- Tests that the execution ID is always different.
CREATE OR REPLACE PROCEDURE TEST_23()
 BEGIN
  DECLARE EXEC_1 ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE EXEC_2 ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE EXEC_3 ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE MESSAGE VARCHAR(128);

  CALL DB2UNIT.RUN_SUITE('TESTS');
  SET EXEC_1 = DB2UNIT.GET_LAST_EXEC_ID();
  CALL DB2UNIT.RUN_SUITE('TESTS');
  SET EXEC_2 = DB2UNIT.GET_LAST_EXEC_ID();
  CALL DB2UNIT.RUN_SUITE('TESTS');
  SET EXEC_3 = DB2UNIT.GET_LAST_EXEC_ID();

  IF (EXEC_1 = EXEC_2) THEN
   SET MESSAGE = 'Exec ID are equal: ' || EXEC_1 ;
   CALL DB2UNIT.FAIL(MESSAGE);
  END IF;
  IF (EXEC_2 = EXEC_3) THEN
   SET MESSAGE = 'Exec ID are equal: ' || EXEC_2 ;
   CALL DB2UNIT.FAIL(MESSAGE);
  END IF;
  IF (EXEC_3 = EXEC_1) THEN
   SET MESSAGE = 'Exec ID are equal: ' || EXEC_3 ;
   CALL DB2UNIT.FAIL(MESSAGE);
  END IF;
 END @

SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_2 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_3 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_4 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_5 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_6 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_7 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_8 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_9 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_10 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_11 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_12 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_13 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_14 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_15 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_16 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_17 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_18 @
-- 19
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_20 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_21 @
SELECT VARCHAR(SUBSTR(DIAGTEXT, 1, 128), 128) FROM ERRORSCHEMA.ERRORTABLE_22 @

DROP TABLE ERRORSCHEMA.ERRORTABLE_2 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_3 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_4 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_5 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_6 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_7 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_8 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_9 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_10 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_11 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_12 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_13 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_14 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_15 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_16 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_17 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_18 @
-- 19
DROP TABLE ERRORSCHEMA.ERRORTABLE_20 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_21 @
DROP TABLE ERRORSCHEMA.ERRORTABLE_22 @

-- Register the suite.
CALL DB2UNIT.REGISTER_SUITE(CURRENT SCHEMA) @

