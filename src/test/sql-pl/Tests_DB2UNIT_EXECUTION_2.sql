--#SET TERMINATOR @

/*
 This file is part of db2unit: A unit testing framework for Db2 LUW.
 Copyright (C)  2014  Andres Gomez Casanova (@AngocA)

 db2unit is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 db2unit is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 Andres Gomez Casanova <angocaATyahooDOTcom>
*/

SET CURRENT SCHEMA DB2UNIT_EXECUTION_2 @

SET PATH = "SYSIBM","SYSFUN","SYSPROC","SYSIBMADM", DB2UNIT_2_BETA, DB2UNIT_EXECUTION_2 @

/**
 * Tests for Execute Tests second part.
 *
 * Version: 2014-12-02 V2_BETA
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

-- Creates the given schema.
CREATE OR REPLACE PROCEDURE CREATE_SCHEMA_TABLE(
  IN SCH_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME
  )
 BEGIN
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SENTENCE = 'CREATE SCHEMA ' || SCH_NAME ;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
 END @

-- Drops the given schema and its table.
CREATE OR REPLACE PROCEDURE DROP_SCHEMA_TABLE(
  IN SCH_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME
  )
 BEGIN
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE INEXISTANT_TABLE CONDITION FOR SQLSTATE '42704';
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42893' SET SENTENCE = '';
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42884' SET SENTENCE = '';
  DECLARE CONTINUE HANDLER FOR INEXISTANT_TABLE SET SENTENCE = '';

  SET SENTENCE = 'DROP TABLE ' || SCH_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP SCHEMA ' || SCH_NAME || ' RESTRICT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
 END @

CALL SYSPROC.ADMIN_DROP_SCHEMA('DB2UNIT_EXECUTION2_TEST_01', NULL,
  'ERRORSCHEMA', 'ERRORTABLE_2') @

-- Drops all tables and schemas.
CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 BEGIN
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' BEGIN END;
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION_TEST_2');
  CALL DROP_SCHEMA_TABLE('DB2UNIT_EXECUTION2_TEST_05_RESULTS');
 END @

-- Before all tests.
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 BEGIN
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' BEGIN END;
  -- If a previous execution did not correctly finished.
  CALL ONE_TIME_TEAR_DOWN();

  CALL CREATE_SCHEMA_TABLE('DB2UNIT_EXECUTION2_TEST_01');

  CALL DB2UNIT.SET_AUTONOMOUS(FALSE);
 END @

-- Test one passed test.
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE EXPECTED INT;
  DECLARE ACTUAL INT;
  DECLARE CURR_ID ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION2_TEST_01';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_01() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  SET CURR_ID = DB2UNIT.GET_LAST_EXEC_ID();

  -- Total
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT TOTAL_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    );
  CALL DB2UNIT.ASSERT_INT_EQUALS('Total tests', EXPECTED, ACTUAL);

  -- Passed
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT PASSED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Passed tests', EXPECTED, ACTUAL);

  -- Failed
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT FAILED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Failed tests', EXPECTED, ACTUAL);

  -- Error
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT ERROR_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Hit error tests', EXPECTED, ACTUAL);

  -- Unxecuted tests
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT UNEXEC_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Unexecuted tests', EXPECTED, ACTUAL);

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_01()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;
 END@

-- Test one failed test.
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE EXPECTED INT;
  DECLARE ACTUAL INT;
  DECLARE CURR_ID ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION2_TEST_02';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_02() '
    || 'BEGIN '
    || 'CALL DB2UNIT.FAIL(); '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  SET CURR_ID = DB2UNIT.GET_LAST_EXEC_ID();

  -- Total
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT TOTAL_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    );
  CALL DB2UNIT.ASSERT_INT_EQUALS('Total tests', EXPECTED, ACTUAL);

  -- Passed
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT PASSED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Passed tests', EXPECTED, ACTUAL);

  -- Failed
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT FAILED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Failed tests', EXPECTED, ACTUAL);

  -- Error
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT ERROR_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Hit error tests', EXPECTED, ACTUAL);

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_02()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;
 END@

-- Test one hit error test.
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE EXPECTED INT;
  DECLARE ACTUAL INT;
  DECLARE CURR_ID ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION2_TEST_03';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_03() '
    || 'BEGIN '
    || 'SIGNAL SQLSTATE ''TEST3''; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  SET CURR_ID = DB2UNIT.GET_LAST_EXEC_ID();

  -- Total
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT TOTAL_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    );
  CALL DB2UNIT.ASSERT_INT_EQUALS('Total tests', EXPECTED, ACTUAL);

  -- Passed
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT PASSED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Passed tests', EXPECTED, ACTUAL);

  -- Failed
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT FAILED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Failed tests', EXPECTED, ACTUAL);

  -- Error
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT ERROR_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Hit error tests', EXPECTED, ACTUAL);

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_03()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;
 END@

-- Test four tests different states.
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE EXPECTED INT;
  DECLARE ACTUAL INT;
  DECLARE CURR_ID ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION2_TEST_04';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_041() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_042() '
    || 'BEGIN '
    || 'CALL DB2UNIT.FAIL(); '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_043() '
    || 'BEGIN '
    || 'SIGNAL SQLSTATE ''TEST4''; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_044() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  SET CURR_ID = DB2UNIT.GET_LAST_EXEC_ID();

  -- Total
  SET EXPECTED = 4;
  SET ACTUAL = (SELECT TOTAL_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    );
  CALL DB2UNIT.ASSERT_INT_EQUALS('Total tests', EXPECTED, ACTUAL);

  -- Passed
  SET EXPECTED = 2;
  SET ACTUAL = (SELECT PASSED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Passed tests', EXPECTED, ACTUAL);

  -- Failed
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT FAILED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Failed tests', EXPECTED, ACTUAL);

  -- Error
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT ERROR_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Hit error tests', EXPECTED, ACTUAL);

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_041()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_042()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_043()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_044()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;
 END@

-- Test the results table to see if the values were stored.
CREATE OR REPLACE PROCEDURE TEST_05_RESULTS()
 BEGIN
  DECLARE EXPECTED VARCHAR(128);
  DECLARE ACTUAL VARCHAR(128);
  DECLARE CURR_ID ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE TESTNAME ANCHOR SYSCAT.PROCEDURES.PROCNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION2_TEST_05_RESULTS';
  SET TESTNAME = 'TEST_05_RES';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME
    || '.' || TESTNAME || '() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  SET CURR_ID = DB2UNIT.GET_LAST_EXEC_ID();

  -- Check values
  SET EXPECTED = 'Passed    ';
  SET ACTUAL = (SELECT FINAL_STATE FROM DB2UNIT_2_BETA.RESULT_TESTS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    AND TEST_NAME = TESTNAME
    );
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Result test', EXPECTED, ACTUAL);

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.' || TESTNAME || '()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;
 END @

-- Test one test not executed.
CREATE OR REPLACE PROCEDURE TEST_06()
 BEGIN
  DECLARE EXPECTED INT;
  DECLARE ACTUAL INT;
  DECLARE CURR_ID ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION2_TEST_06';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.SETUP() '
    || 'BEGIN '
    || 'SIGNAL SQLSTATE ''TEST6'' SET MESSAGE_TEXT = ''Normal error test 6''; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_6() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  SET CURR_ID = DB2UNIT.GET_LAST_EXEC_ID();
  CALL DB2UNIT.BACK_TO_EXECUTING();

  -- Total
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT TOTAL_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    );
  CALL DB2UNIT.ASSERT_INT_EQUALS('Total tests', EXPECTED, ACTUAL);

  -- Passed
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT PASSED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Passed tests', EXPECTED, ACTUAL);

  -- Failed
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT FAILED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Failed tests', EXPECTED, ACTUAL);

  -- Error
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT ERROR_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Hit error tests', EXPECTED, ACTUAL);

  -- Unexecuted tests
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT UNEXEC_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Unexecuted tests', EXPECTED, ACTUAL);

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_6()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.SETUP()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;
 END@

-- Test one test not executed.
CREATE OR REPLACE PROCEDURE TEST_07()
 BEGIN
  DECLARE EXPECTED INT;
  DECLARE ACTUAL INT;
  DECLARE CURR_ID ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION2_TEST_07';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.ONE_TIME_SETUP() '
    || 'BEGIN '
    || 'SIGNAL SQLSTATE ''TEST7'' SET MESSAGE_TEXT = ''Normal error test 7''; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_7() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  SET CURR_ID = DB2UNIT.GET_LAST_EXEC_ID();
  CALL DB2UNIT.BACK_TO_EXECUTING();

  -- Total
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT TOTAL_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    );
  CALL DB2UNIT.ASSERT_INT_EQUALS('Total tests', EXPECTED, ACTUAL);

  -- Passed
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT PASSED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Passed tests', EXPECTED, ACTUAL);

  -- Failed
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT FAILED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Failed tests', EXPECTED, ACTUAL);

  -- Error
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT ERROR_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Hit error tests', EXPECTED, ACTUAL);

  -- Unxecuted tests
  SET EXPECTED = 0;
  SET ACTUAL = (SELECT UNEXEC_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Unexecuted tests', EXPECTED, ACTUAL);

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_7()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.ONE_TIME_SETUP()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;
 END@

-- Test four tests different states.
CREATE OR REPLACE PROCEDURE TEST_08()
 BEGIN
  DECLARE EXPECTED INT;
  DECLARE ACTUAL INT;
  DECLARE CURR_ID ANCHOR DB2UNIT_2_BETA.EXECUTION_REPORTS.EXECUTION_ID;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_2_BETA.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  
  SET SCHEMA_NAME = 'DB2UNIT_EXECUTION2_TEST_08';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.SETUP() '
    || 'BEGIN '
    || ' DECLARE CUR_TEST VARCHAR(128); '
    || ' SET CUR_TEST = DB2UNIT.GET_CURRENT_TESTNAME(); '
    || ' IF (CUR_TEST = ''TEST_85'') THEN '
    || '  SIGNAL SQLSTATE ''TES85'' SET MESSAGE_TEXT = ''Normal error test 85''; '
    || ' END IF; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_81() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_82() '
    || 'BEGIN '
    || 'CALL DB2UNIT.FAIL(); '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_83() '
    || 'BEGIN '
    || 'SIGNAL SQLSTATE ''TEST8''; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_84() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_85() '
    || 'BEGIN '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  CALL DB2UNIT_2_BETA.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  SET CURR_ID = DB2UNIT.GET_LAST_EXEC_ID();

  -- Total
  SET EXPECTED = 5;
  SET ACTUAL = (SELECT TOTAL_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    );
  CALL DB2UNIT.ASSERT_INT_EQUALS('Total tests', EXPECTED, ACTUAL);

  -- Passed
  SET EXPECTED = 2;
  SET ACTUAL = (SELECT PASSED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Passed tests', EXPECTED, ACTUAL);

  -- Failed
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT FAILED_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Failed tests', EXPECTED, ACTUAL);

  -- Error
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT ERROR_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Hit error tests', EXPECTED, ACTUAL);

  -- Unexecuted
  SET EXPECTED = 1;
  SET ACTUAL = (SELECT UNEXEC_TESTS FROM DB2UNIT_2_BETA.SUITES_EXECUTIONS
    WHERE SUITE_NAME = SCHEMA_NAME
    AND EXECUTION_ID = CURR_ID
    WITH UR);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Unexecuted tests', EXPECTED, ACTUAL);

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_81()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_82()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_83()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_84()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_85()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM DB2UNIT_2_BETA.SUITES
    WHERE SUITE_NAME = SCHEMA_NAME;
 END@

-- Register the suite.
CALL DB2UNIT.REGISTER_SUITE(CURRENT SCHEMA) @

