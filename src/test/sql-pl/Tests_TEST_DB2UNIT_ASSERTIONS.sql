--#SET TERMINATOR @

/*
Copyright (c) 2014-2014 Andres Gomez Casanova (AngocA).

All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html -->

Contributors:
Andres Gomez Casanova - initial API and implementation.
*/

SET CURRENT SCHEMA TEST_DB2UNIT_ASSERTIONS @

SET PATH = "SYSIBM","SYSFUN","SYSPROC","SYSIBMADM", DB2UNIT_1A, TEST_DB2UNIT_ASSERTIONS @

/**
 * Tests for assertions.
 *
 * Version: 2014-05-01 1-Alpha
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

-- Previously create the table in order to compile these tests.
CREATE TABLE REPORT_TESTS LIKE DB2UNIT_1A.REPORT_TESTS @

-- Before all tests.
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 BEGIN
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42704'
    SET SENTENCE = '';

  CALL DB2UNIT.CLEAN_TEST_RESULT();
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_01';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_02';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_04';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_05';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_07_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_08_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_09_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_10_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_11_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_11_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_12_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_12_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_13_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_13_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_14_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_14_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_15_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_15_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_16_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_16_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_17_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_17_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_18_EXP';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA
    || '.TABLE_TEST_18_ACT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
 END @

-- Before all tests.
CREATE OR REPLACE PROCEDURE AFTER_SUITE()
  CALL ONE_TIME_SETUP() @

-- GENERAL

-- Tests to fail a test.
CREATE OR REPLACE PROCEDURE TEST_GENERAL_01()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'Test failed';
  CALL DB2UNIT.FAIL();
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- STRING

-- Tests that no message is inserted in the report when two strings are equals
-- in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_STRING_01()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET STR_1 = 'String';
  SET STR_2 = 'String';
  CALL DB2UNIT.ASSERT_STRING_EQUALS(STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test two different strings with same length in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_STRING_02()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'The content of both strings is different';
  SET STR_1 = 'String1';
  SET STR_2 = 'String2';
  CALL DB2UNIT.ASSERT_STRING_EQUALS(STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual        : "String2"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected      : "String1"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test two different strings, the first being longer than the second one in
-- assert_equals.
CREATE OR REPLACE PROCEDURE TEST_STRING_03()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'Strings have different lengths';
  SET STR_1 = 'String-LONG';
  SET STR_2 = 'String';
  CALL DB2UNIT.ASSERT_STRING_EQUALS(STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual        : "String"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected      : "String-LONG"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test two different strings, the second being longer than the first one in
-- assert_equals.
CREATE OR REPLACE PROCEDURE TEST_STRING_04()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'Strings have different lengths';
  SET STR_1 = 'String';
  SET STR_2 = 'String-LONG';
  CALL DB2UNIT.ASSERT_STRING_EQUALS(STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual        : "String-LONG"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected      : "String"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test both strings as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_STRING_05()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET STR_1 = NULL;
  SET STR_2 = NULL;
  CALL DB2UNIT.ASSERT_STRING_EQUALS(STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test first string as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_STRING_06()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'Nullability difference';
  SET STR_1 = NULL;
  SET STR_2 = 'String';
  CALL DB2UNIT.ASSERT_STRING_EQUALS(STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual        : "String"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected      : NULL'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test second string as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_STRING_07()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'Nullability difference';
  SET STR_1 = 'String';
  SET STR_2 = NULL;
  CALL DB2UNIT.ASSERT_STRING_EQUALS(STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual        : NULL'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected      : "String"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test a string that should be truncated in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_STRING_08()
 BEGIN
  DECLARE ACTUAL_MSG_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE ACTUAL_MSG_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET STR = '123456789012345678901234567890123456789012345678901234567890123456'
    || '78901234567890123456789012345678901234567890123456789012345678901234567'
    || '89012345678901234567890123456789012345678901234567890123456789012345678'
    || '90123456789012345678901234567890123456789012345678901234567890123456789'
    || '01234567890123456789012345678901234567890123456789012345678901234567890'
    || '123456789012345678901234567890';

  SET STR_1 = STR;
  SET STR_2 = STR || '1';
  CALL DB2UNIT.ASSERT_STRING_EQUALS(STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SET EXPECTED_MSG_1 = 'Actl truncated: "' || SUBSTR(STR, 1, 100) || '"..."'
    || SUBSTR(STR, LENGTH(STR) - 99) || '1"';
  SELECT MESSAGE INTO ACTUAL_MSG_1
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG_1
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET EXPECTED_MSG_2 = 'Expd truncated: "' || SUBSTR(STR, 1, 100) || '"..."'
    || SUBSTR(STR, LENGTH(STR) - 100) || '"';
  SELECT MESSAGE INTO ACTUAL_MSG_2
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG_2
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Strings have different lengths'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG_1, ACTUAL_MSG_1);
  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG_2, ACTUAL_MSG_2);
 END@

-- Test the assert_equals with null message.
CREATE OR REPLACE PROCEDURE TEST_STRING_09()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'The content of both strings is different';
  SET STR_1 = 'String1';
  SET STR_2 = 'String2';
  CALL DB2UNIT.ASSERT_STRING_EQUALS(NULL, STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual        : "String2"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected      : "String1"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the assert_equals with empty message.
CREATE OR REPLACE PROCEDURE TEST_STRING_10()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'The content of both strings is different';
  SET STR_1 = 'String1';
  SET STR_2 = 'String2';
  CALL DB2UNIT.ASSERT_STRING_EQUALS('', STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual        : "String2"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected      : "String1"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the assert_equals with empty message.
CREATE OR REPLACE PROCEDURE TEST_STRING_11()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_1 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR_2 ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;

  SET EXPECTED_MSG = 'Text. The content of both strings is different';
  SET STR_1 = 'String1';
  SET STR_2 = 'String2';
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Text', STR_1, STR_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual        : "String2"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected      : "String1"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the assert_string_null with null.
CREATE OR REPLACE PROCEDURE TEST_STRING_12()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STRING ANCHOR DB2UNIT_1A.MAX_VALUES.MESSAGE_ASSERT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET STRING = NULL;
  CALL DB2UNIT.ASSERT_STRING_NULL(STRING);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_string_null without null.
CREATE OR REPLACE PROCEDURE TEST_STRING_13()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STRING ANCHOR DB2UNIT_1A.MAX_VALUES.MESSAGE_ASSERT;

  SET EXPECTED_MSG = 'The given string is "NOT NULL"';
  SET STRING = 'Message';
  CALL DB2UNIT.ASSERT_STRING_NULL(STRING);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_string_not_null with not null.
CREATE OR REPLACE PROCEDURE TEST_STRING_14()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STRING ANCHOR DB2UNIT_1A.MAX_VALUES.MESSAGE_ASSERT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET STRING = 'Message';
  CALL DB2UNIT.ASSERT_STRING_NOT_NULL(STRING);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_string_not_null without not null.
CREATE OR REPLACE PROCEDURE TEST_STRING_15()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STRING ANCHOR DB2UNIT_1A.MAX_VALUES.MESSAGE_ASSERT;

  SET EXPECTED_MSG = 'The given string is "NULL"';
  SET STRING = NULL;
  CALL DB2UNIT.ASSERT_STRING_NOT_NULL(STRING);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- BOOLEAN

-- Tests that no message is inserted in the report when two booleans are equals
-- in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_01()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE BOOL_1 BOOLEAN;
  DECLARE BOOL_2 BOOLEAN;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET BOOL_1 = TRUE;
  SET BOOL_2 = TRUE;
  CALL DB2UNIT.ASSERT_BOOLEAN_EQUALS(BOOL_1, BOOL_2);
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test both booleans as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_02()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE BOOL_1 BOOLEAN;
  DECLARE BOOL_2 BOOLEAN;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET BOOL_1 = NULL;
  SET BOOL_2 = NULL;
  CALL DB2UNIT.ASSERT_BOOLEAN_EQUALS(BOOL_1, BOOL_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test two different booleans with same data type in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_03()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE BOOL_1 BOOLEAN;
  DECLARE BOOL_2 BOOLEAN;

  SET EXPECTED_MSG = 'The value of both booleans is different';
  SET BOOL_1 = TRUE;
  SET BOOL_2 = FALSE;
  CALL DB2UNIT.ASSERT_BOOLEAN_EQUALS(BOOL_1, BOOL_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual  : "FALSE"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected: "TRUE "'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test first boolean as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_04()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE BOOL_1 BOOLEAN;
  DECLARE BOOL_2 BOOLEAN;

  SET EXPECTED_MSG = 'Nullability difference';
  SET BOOL_1 = NULL;
  SET BOOL_2 = FALSE;
  CALL DB2UNIT.ASSERT_BOOLEAN_EQUALS(BOOL_1, BOOL_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual  : "FALSE"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected: NULL'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test second boolean as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_05()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE BOOL_1 BOOLEAN;
  DECLARE BOOL_2 BOOLEAN;

  SET EXPECTED_MSG = 'Nullability difference';
  SET BOOL_1 = TRUE;
  SET BOOL_2 = NULL;
  CALL DB2UNIT.ASSERT_BOOLEAN_EQUALS(BOOL_1, BOOL_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual  : NULL'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected: "TRUE "'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the assert_true to true.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_06()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BOOLEAN;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET VALUE = TRUE;
  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_true to false.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_07()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BOOLEAN;

  SET EXPECTED_MSG = 'The given value is "FALSE"';
  SET VALUE = FALSE;
  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_false to false.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_08()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BOOLEAN;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET VALUE = FALSE;
  CALL DB2UNIT.ASSERT_BOOLEAN_FALSE(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_false to true.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_09()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BOOLEAN;

  SET EXPECTED_MSG = 'The given value is "TRUE"';
  SET VALUE = TRUE;
  CALL DB2UNIT.ASSERT_BOOLEAN_FALSE(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_boolean_null with null.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_10()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BOOLEAN;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET VALUE = NULL;
  CALL DB2UNIT.ASSERT_BOOLEAN_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_boolean_null without null.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_11()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BOOLEAN;

  SET EXPECTED_MSG = 'The given value is "NOT NULL"';
  SET VALUE = TRUE;
  CALL DB2UNIT.ASSERT_BOOLEAN_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_boolean_not_null with not null.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_12()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BOOLEAN;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET VALUE = TRUE;
  CALL DB2UNIT.ASSERT_BOOLEAN_NOT_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_boolean_not_null without not null.
CREATE OR REPLACE PROCEDURE TEST_BOOLEAN_13()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BOOLEAN;

  SET EXPECTED_MSG = 'The given value is "NULL"';
  SET VALUE = NULL;
  CALL DB2UNIT.ASSERT_BOOLEAN_NOT_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- INTEGER

-- Tests that no message is inserted in the report when two ints are equals
-- in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_INTEGER_01()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE INT_1 BIGINT;
  DECLARE INT_2 BIGINT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET INT_1 = 42;
  SET INT_2 = 42;
  CALL DB2UNIT.ASSERT_INT_EQUALS(INT_1, INT_2);
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test both ints as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_INTEGER_02()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE INT_1 BIGINT;
  DECLARE INT_2 BIGINT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET INT_1 = NULL;
  SET INT_2 = NULL;
  CALL DB2UNIT.ASSERT_INT_EQUALS(INT_1, INT_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test two different ints with same data type in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_INTEGER_03()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE INT_1 BIGINT;
  DECLARE INT_2 BIGINT;

  SET EXPECTED_MSG = 'The value of both integers is different';
  SET INT_1 = 5;
  SET INT_2 = 4;
  CALL DB2UNIT.ASSERT_INT_EQUALS(INT_1, INT_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual  : "4"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected: "5"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test two different ints with diff data type in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_INTEGER_04()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE INT_1 INT;
  DECLARE INT_2 SMALLINT;

  SET EXPECTED_MSG = 'The value of both integers is different';
  SET INT_1 = 7;
  SET INT_2 = 6;
  CALL DB2UNIT.ASSERT_INT_EQUALS(INT_1, INT_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual  : "6"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected: "7"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test first int as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_INTEGER_05()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE INT_1 BIGINT;
  DECLARE INT_2 BIGINT;

  SET EXPECTED_MSG = 'Nullability difference';
  SET INT_1 = NULL;
  SET INT_2 = 3;
  CALL DB2UNIT.ASSERT_INT_EQUALS(INT_1, INT_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual  : "3"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected: NULL'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test second int as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_INTEGER_06()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE INT_1 BIGINT;
  DECLARE INT_2 BIGINT;

  SET EXPECTED_MSG = 'Nullability difference';
  SET INT_1 = 2;
  SET INT_2 = NULL;
  CALL DB2UNIT.ASSERT_INT_EQUALS(INT_1, INT_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual  : NULL'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected: "2"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the assert_int_null with null.
CREATE OR REPLACE PROCEDURE TEST_INTEGER_07()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BIGINT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET VALUE = NULL;
  CALL DB2UNIT.ASSERT_INT_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_int_null without null.
CREATE OR REPLACE PROCEDURE TEST_INTEGER_08()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BIGINT;

  SET EXPECTED_MSG = 'The given value is "NOT NULL"';
  SET VALUE = 8;
  CALL DB2UNIT.ASSERT_INT_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_int_not_null with not null.
CREATE OR REPLACE PROCEDURE TEST_INTEGER_09()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BIGINT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET VALUE = 9;
  CALL DB2UNIT.ASSERT_INT_NOT_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_int_not_null without not null.
CREATE OR REPLACE PROCEDURE TEST_INTEGER_10()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE BIGINT;

  SET EXPECTED_MSG = 'The given value is "NULL"';
  SET VALUE = NULL;
  CALL DB2UNIT.ASSERT_INT_NOT_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- DECIMAL

-- Tests that no message is inserted in the report when two decimals are equals
-- in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_01()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE INT_1 DECFLOAT;
  DECLARE INT_2 DECFLOAT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET INT_1 = 42.6543;
  SET INT_2 = 42.6543;
  CALL DB2UNIT.ASSERT_INT_EQUALS(INT_1, INT_2);
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Tests that no message is inserted in the report when two decimals are equals
-- in assert_equals, with real data types.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_02()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE INT_1 REAL;
  DECLARE INT_2 REAL;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET INT_1 = 42.6543;
  SET INT_2 = 42.6543;
  CALL DB2UNIT.ASSERT_INT_EQUALS(INT_1, INT_2);
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Tests that no message is inserted in the report when two decimals are equals
-- in assert_equals, with real data types.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_03()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE INT_1 DOUBLE;
  DECLARE INT_2 DOUBLE;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET INT_1 = 42.6543;
  SET INT_2 = 42.6543;
  CALL DB2UNIT.ASSERT_INT_EQUALS(INT_1, INT_2);
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test both decimals as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_04()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE DEC_1 DECFLOAT;
  DECLARE DEC_2 DECFLOAT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET DEC_1 = NULL;
  SET DEC_2 = NULL;
  CALL DB2UNIT.ASSERT_DEC_EQUALS(DEC_1, DEC_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test two different decimals with same data type in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_05()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE DEC_1 DECFLOAT;
  DECLARE DEC_2 DECFLOAT;

  SET EXPECTED_MSG = 'The value of both decimals is different';
  SET DEC_1 = 5.3658463;
  SET DEC_2 = 4.65575;
  CALL DB2UNIT.ASSERT_DEC_EQUALS(DEC_1, DEC_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual  : "' || DEC_2 || '"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected: "' || DEC_1 || '"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test two different decimals with diFf data type in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_06()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE DEC_1 DOUBLE;
  DECLARE DEC_2 REAL;

  SET EXPECTED_MSG = 'The value of both decimals is different';
  SET DEC_1 = 7.31;
  SET DEC_2 = 6.34;
  CALL DB2UNIT.ASSERT_DEC_EQUALS(DEC_1, DEC_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE LIKE 'Actual  : "6.3%"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE LIKE 'Expected: "7.3%"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test two different decimals with diFf data type in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_07()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE DEC_1 REAL;
  DECLARE DEC_2 REAL;

  SET EXPECTED_MSG = 'The value of both decimals is different';
  SET DEC_1 = 9.435;
  SET DEC_2 = 3.14;
  CALL DB2UNIT.ASSERT_DEC_EQUALS(DEC_1, DEC_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE LIKE 'Actual  : "3.1%"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE LIKE 'Expected: "9.43%"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test first decimal as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_08()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE DEC_1 DECFLOAT;
  DECLARE DEC_2 DECFLOAT;

  SET EXPECTED_MSG = 'Nullability difference';
  SET DEC_1 = NULL;
  SET DEC_2 = 3.134;
  CALL DB2UNIT.ASSERT_DEC_EQUALS(DEC_1, DEC_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual  : "' || DEC_2 || '"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected: NULL'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test second decimal as null in assert_equals.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_09()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE DEC_1 DECFLOAT;
  DECLARE DEC_2 DECFLOAT;

  SET EXPECTED_MSG = 'Nullability difference';
  SET DEC_1 = 2.8764;
  SET DEC_2 = NULL;
  CALL DB2UNIT.ASSERT_DEC_EQUALS(DEC_1, DEC_2);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Actual  : NULL'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = 'Expected: "' || DEC_1 || '"'
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE)
      FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the assert_dec_null with null.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_10()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE DECFLOAT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET VALUE = NULL;
  CALL DB2UNIT.ASSERT_DEC_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_dec_null without null.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_11()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE DECFLOAT;

  SET EXPECTED_MSG = 'The given value is "NOT NULL"';
  SET VALUE = 8482.34;
  CALL DB2UNIT.ASSERT_DEC_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_dec_not_null with not null.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_12()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE DECFLOAT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET VALUE = 9;
  CALL DB2UNIT.ASSERT_DEC_NOT_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_dec_not_null without not null.
CREATE OR REPLACE PROCEDURE TEST_DECIMAL_13()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE VALUE DECFLOAT;

  SET EXPECTED_MSG = 'The given value is "NULL"';
  SET VALUE = NULL;
  CALL DB2UNIT.ASSERT_DEC_NOT_NULL(VALUE);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- TABLES

-- Test the assert_empty_table with an empty table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_01()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET TABLE_NAME = 'TABLE_TEST_01';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EMPTY(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_empty_table with a non empty table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_02()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'The table is not empty';
  SET TABLE_NAME = 'TABLE_TEST_02';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EMPTY(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_empty_table with an inexistant table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_03()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;

  SET TABLE_NAME = 'TABLE_TEST_03_INEXISTANT';
  SET EXPECTED_MSG = 'Table does not exist '
    || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.' || TABLE_NAME;

  CALL DB2UNIT.ASSERT_TABLE_EMPTY(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_non_empty_table with a non empty table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_04()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET TABLE_NAME = 'TABLE_TEST_03';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_NON_EMPTY(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_non_empty_table with an empty table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_05()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'The table is empty';
  SET TABLE_NAME = 'TABLE_TEST_04';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_NON_EMPTY(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_non_empty_table with an inexistant table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_06()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;

  SET TABLE_NAME = 'TABLE_TEST_06_INEXISTANT';
  SET EXPECTED_MSG = 'Table does not exist '
    || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.' || TABLE_NAME;

  CALL DB2UNIT.ASSERT_TABLE_NON_EMPTY(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test assert_equals_table with null schema.
CREATE OR REPLACE PROCEDURE TEST_TABLE_07()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET TABLE_NAME = 'TABLE_TEST_07_EXP';
  SET EXPECTED_MSG = 'Some of the entry values are null: '
    || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || ',' || TABLE_NAME || ','
    || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || ',NULL';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME, DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, NULL);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test assert_equals_table with null table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_08()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET TABLE_NAME = 'TABLE_TEST_08_EXP';
  SET EXPECTED_MSG = 'Some of the entry values are null: '
    || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || ',' || TABLE_NAME || ',NULL,'
    || TABLE_NAME;
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME, NULL, TABLE_NAME);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test assert_equals_table with null schema.
CREATE OR REPLACE PROCEDURE TEST_TABLE_09()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET TABLE_NAME = 'TABLE_TEST_09_EXP';
  SET EXPECTED_MSG = 'Some of the entry values are null: '
    || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || ',NULL,'
    || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || ',' || TABLE_NAME;
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    NULL, DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test assert_equals_table with null table.
CREATE OR REPLACE PROCEDURE TEST_TABLE_10()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET TABLE_NAME = 'TABLE_TEST_10_EXP';
  SET EXPECTED_MSG = 'Some of the entry values are null: NULL,' || TABLE_NAME
    || ',' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || ',' || TABLE_NAME;
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME || '(COL int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(NULL, TABLE_NAME,
    DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_equals_table with different columns.
CREATE OR REPLACE PROCEDURE TEST_TABLE_11()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Different quantity of columns';
  SET TABLE_NAME_EXP = 'TABLE_TEST_11_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_11_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int, COL2 INT)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with different columns.
CREATE OR REPLACE PROCEDURE TEST_TABLE_12()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Different quantity of columns';
  SET TABLE_NAME_EXP = 'TABLE_TEST_12_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int, COL2 INT)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_12_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with different quantity.
CREATE OR REPLACE PROCEDURE TEST_TABLE_13()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'The quantity of different items is not the same in column: COL1';
  SET TABLE_NAME_EXP = 'TABLE_TEST_13_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_13_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  COMMIT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with different quantity.
CREATE OR REPLACE PROCEDURE TEST_TABLE_14()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'The quantity of different items is not the same in column: COL1';
  SET TABLE_NAME_EXP = 'TABLE_TEST_14_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_14_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with empty in both.
CREATE OR REPLACE PROCEDURE TEST_TABLE_15()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET TABLE_NAME_EXP = 'TABLE_TEST_15_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_15_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

-- Test the assert_equals_table with different values.
CREATE OR REPLACE PROCEDURE TEST_TABLE_16()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Different values in column: COL1';
  SET TABLE_NAME_EXP = 'TABLE_TEST_16_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_16_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || ' VALUES (2)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with different values.
CREATE OR REPLACE PROCEDURE TEST_TABLE_17()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Different quantity of values in column: COL1';
  SET TABLE_NAME_EXP = 'TABLE_TEST_17_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_17_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the assert_equals_table with same values.
CREATE OR REPLACE PROCEDURE TEST_TABLE_18()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE TABLE_NAME_EXP ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE TABLE_NAME_ACT ANCHOR SYSCAT.TABLES.TABNAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Message check';
  INSERT INTO TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS (DATE, EXECUTION_ID,
    TEST_NAME, MESSAGE) VALUES (CURRENT TIMESTAMP, 0, '', EXPECTED_MSG);
  SET TABLE_NAME_EXP = 'TABLE_TEST_18_EXP';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;
  SET TABLE_NAME_ACT = 'TABLE_TEST_18_ACT';
  SET SENTENCE = 'CREATE TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || '(COL1 int)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'INSERT INTO ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT || ' VALUES (1)';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_TABLE_EQUALS(DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA,
    TABLE_NAME_EXP, DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA, TABLE_NAME_ACT);
  CALL DB2UNIT.CLEAN_TEST_RESULT();

  SELECT MESSAGE INTO ACTUAL_MSG
    FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_ACT;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || DB2UNIT_1A.DB2UNIT.UTILITY_SCHEMA || '.'
    || TABLE_NAME_EXP;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
  DELETE FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS
    WHERE EXECUTION_ID = 0
    AND MESSAGE = EXPECTED_MSG
    AND DATE = (SELECT MAX(DATE) FROM TEST_DB2UNIT_ASSERTIONS.REPORT_TESTS);
 END @

