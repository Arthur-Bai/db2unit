--#SET TERMINATOR @

/*
Copyright (c) 2014-2014 Andres Gomez Casanova (AngocA).

All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html -->

Contributors:
Andres Gomez Casanova - initial API and implementation.
*/

SET CURRENT SCHEMA TEST_DB2UNIT_EXECUTION @

SET PATH = "SYSIBM","SYSFUN","SYSPROC","SYSIBMADM", DB2UNIT_1A, TEST_DB2UNIT_EXECUTION @

/**
 * Tests for Execute Tests.
 *
 * Version: 2014-04-30 1-Alpha
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

-- Creates the given schema.
CREATE OR REPLACE PROCEDURE CREATE_SCHEMA_TABLE(
  IN SCH_NAME ANCHOR SYSCAT.TABLES.TABSCHEMA
  )
 BEGIN
  DECLARE SENTENCE VARCHAR(1024);
  DECLARE STMT STATEMENT;

  SET SENTENCE = 'CREATE SCHEMA ' || SCH_NAME ;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
 END @

-- Drops the given schema and its table.
CREATE OR REPLACE PROCEDURE DROP_SCHEMA_TABLE(
  IN SCH_NAME ANCHOR SYSCAT.TABLES.TABSCHEMA
  )
 BEGIN
  DECLARE SENTENCE VARCHAR(1024);
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42884' SET SENTENCE = '';
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42704' SET SENTENCE = '';

  SET SENTENCE = 'DROP TABLE ' || SCH_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP SCHEMA ' || SCH_NAME || ' RESTRICT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
 END @

-- Creates the necessary schemas.
CREATE OR REPLACE PROCEDURE BEFORE_SUITE ()
 BEGIN
  -- If a previous execution did not correclty finished.
  CALL AFTER_SUITE();

  CALL CREATE_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_2');
  CALL CREATE_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_3');
 END @

-- Drops all tables and schemas.
CREATE OR REPLACE PROCEDURE AFTER_SUITE ()
 BEGIN
  CALL DROP_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_2');
  CALL DROP_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_3');
 END @

-- Test the execution of a non-existent schema.
CREATE OR REPLACE PROCEDURE TEST_1 ()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.EXECUTION_REPORTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.EXECUTION_REPORTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.TABLES.TABSCHEMA;

  SET SCHEMA_NAME = 'NoSchema';
  SET EXPECTED_MSG = 'The given schema does not exists: ' || SCHEMA_NAME;
  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_1A.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_1A.EXECUTION_REPORTS);

  CALL DB2UNIT_1A.DB2UNIT.ASSERT(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the execution of a existent schema without problem.
CREATE OR REPLACE PROCEDURE TEST_2 ()
 BEGIN
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.TABLES.TABSCHEMA;

  SET SCHEMA_NAME = 'TEST_DB2UNIT_EXECUTION_TEST_2';

  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
 END@

-- Test the execution of a existent schema without table creation.
CREATE OR REPLACE PROCEDURE TEST_3 ()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.EXECUTION_REPORTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.EXECUTION_REPORTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.TABLES.TABSCHEMA;

  SET EXPECTED_MSG = 'The reports table already exist: ' || SCHEMA_NAME;
  SET SCHEMA_NAME = 'TEST_DB2UNIT_EXECUTION_TEST_3';

  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM DB2UNIT_1A.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_1A.EXECUTION_REPORTS);

  CALL DB2UNIT_1A.DB2UNIT.ASSERT(EXPECTED_MSG, ACTUAL_MSG);
 END@

