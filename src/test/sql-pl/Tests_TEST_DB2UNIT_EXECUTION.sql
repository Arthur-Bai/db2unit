--#SET TERMINATOR @

/*
Copyright (c) 2014-2014 Andres Gomez Casanova (AngocA).

All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html -->

Contributors:
Andres Gomez Casanova - initial API and implementation.
*/

SET CURRENT SCHEMA TEST_DB2UNIT_EXECUTION @

SET PATH = "SYSIBM","SYSFUN","SYSPROC","SYSIBMADM", DB2UNIT_1A, TEST_DB2UNIT_EXECUTION @

/**
 * Tests for Execute Tests.
 *
 * Version: 2014-04-30 1-Alpha
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

-- Creates the given schema.
CREATE OR REPLACE PROCEDURE CREATE_SCHEMA_TABLE(
  IN SCH_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME
  )
 BEGIN
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SENTENCE = 'CREATE SCHEMA ' || SCH_NAME ;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
 END @

-- Drops the given schema and its table.
CREATE OR REPLACE PROCEDURE DROP_SCHEMA_TABLE(
  IN SCH_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME
  )
 BEGIN
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42884' SET SENTENCE = '';
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42704' SET SENTENCE = '';

  SET SENTENCE = 'DROP TABLE ' || SCH_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP SCHEMA ' || SCH_NAME || ' RESTRICT';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
 END @

-- Drops all tables and schemas.
CREATE OR REPLACE PROCEDURE AFTER_SUITE()
 BEGIN
  CALL DROP_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_2');
  CALL DROP_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_3');
  CALL DROP_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_4');
  CALL DROP_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_5');
  CALL DROP_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_6_12345678901234567890'
    || '1234567890123456789012345678901234567890123456789012345678901234567890'
    || '12345678');
  CALL DROP_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_7');
 END @

-- Creates the necessary schemas.
CREATE OR REPLACE PROCEDURE BEFORE_SUITE()
 BEGIN
  -- If a previous execution did not correclty finished.
  CALL AFTER_SUITE();

  CALL CREATE_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_2');
  CALL CREATE_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_3');
  CALL CREATE_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_4');
  CALL CREATE_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_5');
  CALL CREATE_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_6_12345678901234567890'
    || '1234567890123456789012345678901234567890123456789012345678901234567890'
    || '12345678');
  CALL CREATE_SCHEMA_TABLE('TEST_DB2UNIT_EXECUTION_TEST_7');
 END @

-- Test the execution of a non-existent schema.
CREATE OR REPLACE PROCEDURE TEST_1()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.EXECUTION_REPORTS.MESSAGE_REPORT;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.EXECUTION_REPORTS.MESSAGE_REPORT;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;

  SET SCHEMA_NAME = 'NoSchema                                                  '
    || '                                    ';
  SET EXPECTED_MSG = 'The given schema does not exists: ' || SCHEMA_NAME;
  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  SELECT MESSAGE_REPORT INTO ACTUAL_MSG
    FROM DB2UNIT_1A.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_1A.EXECUTION_REPORTS);

  CALL DB2UNIT_1A.DB2UNIT.ASSERT_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the execution of a existent schema without problem.
CREATE OR REPLACE PROCEDURE TEST_2()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Starting execution';
  SET SCHEMA_NAME = 'TEST_DB2UNIT_EXECUTION_TEST_2';

  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);

  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;
  COMMIT;

  CALL DB2UNIT_1A.DB2UNIT.ASSERT_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test the execution of a existent schema without table creation.
CREATE OR REPLACE PROCEDURE TEST_3()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.EXECUTION_REPORTS.MESSAGE_REPORT;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.EXECUTION_REPORTS.MESSAGE_REPORT;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;

  SET SCHEMA_NAME = 'TEST_DB2UNIT_EXECUTION_TEST_3';
  SET EXPECTED_MSG = 'The reports table already exist: ' || SCHEMA_NAME
    || '.REPORT_TESTS                                                     ';

  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  SELECT MESSAGE_REPORT INTO ACTUAL_MSG
    FROM DB2UNIT_1A.EXECUTION_REPORTS
    WHERE DATE = (SELECT MAX(DATE) FROM DB2UNIT_1A.EXECUTION_REPORTS);

  CALL DB2UNIT_1A.DB2UNIT.ASSERT_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Tests that a report message persist even after a rollback
CREATE OR REPLACE PROCEDURE TEST_4()
 BEGIN
  DECLARE ID INT;
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' SET ID = 0;
  SET EXPECTED_MSG = 'Executing TEST_4';
  SET SCHEMA_NAME = 'TEST_DB2UNIT_EXECUTION_TEST_4';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_4() '
    || 'BEGIN '
    || 'ROLLBACK; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE TABLE ' || SCHEMA_NAME || '.' || DB2UNIT.REPORTS_TABLE
    || ' LIKE ' || DB2UNIT.UTILITY_SCHEMA || '.' || DB2UNIT.REPORTS_TABLE;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  COMMIT;
  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_4()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT_1A.DB2UNIT.ASSERT_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Tests that a report message persist even after a commit
CREATE OR REPLACE PROCEDURE TEST_5()
 BEGIN
  DECLARE ID INT;
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;
  SET EXPECTED_MSG = 'Executing TEST_5';
  SET SCHEMA_NAME = 'TEST_DB2UNIT_EXECUTION_TEST_5';

  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_5() '
    || 'BEGIN '
    || 'COMMIT; '
    || 'END ';
  CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'CREATE TABLE ' || SCHEMA_NAME || '.' || DB2UNIT.REPORTS_TABLE
    || ' LIKE ' || DB2UNIT.UTILITY_SCHEMA || '.' || DB2UNIT.REPORTS_TABLE;
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  COMMIT;
  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);
  COMMIT;
  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_5()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT_1A.DB2UNIT.ASSERT_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END @

-- Test the execution of a existent schema with a very long name without
-- problem. This is the MAX name for a schema without generating problems.
CREATE OR REPLACE PROCEDURE TEST_6()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET EXPECTED_MSG = 'Starting execution';
  SET SCHEMA_NAME = 'TEST_DB2UNIT_EXECUTION_TEST_6_12345678901234567890'
    || '1234567890123456789012345678901234567890123456789012345678901234567890'
    || '123456789';

  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);

  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;
  COMMIT;

  CALL DB2UNIT_1A.DB2UNIT.ASSERT_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test a string that is too long.
CREATE OR REPLACE PROCEDURE TEST_7()
 BEGIN
  DECLARE ACTUAL_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE EXPECTED_MSG ANCHOR DB2UNIT_1A.REPORT_TESTS.MESSAGE;
  DECLARE STR VARCHAR(1024);
  DECLARE SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME;
  DECLARE SENTENCE ANCHOR DB2UNIT_1A.MAX_VALUES.SENTENCE;
  DECLARE STMT STATEMENT;

  SET SCHEMA_NAME = 'TEST_DB2UNIT_EXECUTION_TEST_7';
  SET STR = '123456789012345678901234567890123456789012345678901234567890123456'
    || '78901234567890123456789012345678901234567890123456789012345678901234567'
    || '89012345678901234567890123456789012345678901234567890123456789012345678'
    || '90123456789012345678901234567890123456789012345678901234567890123456789'
    || '01234567890123456789012345678901234567890123456789012345678901234567890'
    || '12345678901234567890123456789012345678901234567890123456789012345678901'
    || '23456789012345678901234567890123456789012345678901234567890123456789012'
    || '34567890123456789012345678901234567890123456789012345678901234567890123'
    || '45678901234567890123456789012345678901234567890123456789012345678901234'
    || '56789012345678901234567890123456789012345678901234567890123456789012345'
    || '6789012345678901234567890';
  SET EXPECTED_MSG = 'String too long: "SQL0433N  Value "123456789012345678901234567890123456789012345678901234567890" is too long.  SQLSTATE=22001   "';
  SET SENTENCE = 'CREATE OR REPLACE PROCEDURE ' || SCHEMA_NAME || '.TEST_7() '
    || 'BEGIN '
    || 'CALL DB2UNIT.ASSERT_EQUALS(''' || STR || ''', '''');'
    || 'END ';
  --CALL LOGGER.ERROR(0, SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT_1A.DB2UNIT.RUN_SUITE(SCHEMA_NAME);

  SET SENTENCE = 'DELETE FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS) '
    || 'AND MESSAGE = ''Finishing execution''';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  SET SENTENCE = 'SET ? = (SELECT MESSAGE '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS '
    || 'WHERE DATE = (SELECT MAX(DATE) '
    || 'FROM ' || SCHEMA_NAME || '.REPORT_TESTS))';
  CALL LOGGER.ERROR(MESSAGE => SENTENCE);
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT INTO ACTUAL_MSG;

  SET SENTENCE = 'DROP PROCEDURE ' || SCHEMA_NAME || '.TEST_7()';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;
  SET SENTENCE = 'DROP TABLE ' || SCHEMA_NAME || '.REPORT_TESTS';
  PREPARE STMT FROM SENTENCE;
  EXECUTE STMT;

  CALL DB2UNIT.ASSERT_EQUALS(EXPECTED_MSG, ACTUAL_MSG);
 END@

